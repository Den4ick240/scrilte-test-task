swagger: "2.0"
info:
  description: Api developed by Denis Zhigalov as a high test task for Junior FullStack developer job in Scrile
  version: 1.0.0
  title: High Test Task
  contact:
    email: denzhigalov@gmail.com
host: "localhost:8080"
tags:
  - name: image
    description: image store
  - name: user
    description: Operations about user
schemes:
  - https
  - http
paths:
  /image:
    post:
      tags:
        - image
      summary: Upload picture to server.
      operationId: uploadPicture
      description: Receives a picture, saves it to the server catalog and returns url for the saved picture.

      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: image
          description: Image to upload to server.
          required: true
          type: file
      responses:
        "200":
          description: Image is successfully uploaded.
          schema:
            type: string
        "500":
          description: Image could not be uploaded.
  /image/{imageId}:
    get:
      tags:
        - image
      summary: Get image.
      description: Get image, previously uploaded to server.
      parameters:
        - in: path
          name: imageId
          description: Id of the image.
          required: true
          type: string
      produces:
        - image/jpeg
      responses:
        "200":
          description: Successful operation.
          schema:
            type: file
        "400":
          description: Image not found.


  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Saves user data to server database and returns new unique id of the saved user.
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New user data
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          schema:
            type: integer
            format: int64
          description: Unique id of the saved user.
        "400":
          description: Bad userStatus.
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by id.
      description: ""
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: The unique user id.
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: User not found
  /user/status:
    post:
      tags:
        - user
      summary: Change user status
      description: ""
      operationId: setStatus
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          description: Body contains user id and new user status.
          required: true
          schema:
            $ref: "#/definitions/ChangeStatusRequest"
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/ChangeStatusResponse"
        "400":
          description: User not found or bad userStatus.

definitions:
  User:
    type: object
    required:
      - username
      - email
      - avatarUrl
      - userStatus
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      username:
        type: string
      email:
        type: string
      avatarUrl:
        type: string
      userStatus:
        $ref: "#/definitions/Status"
        description: User status online / offline
  ChangeStatusRequest:
    type: object
    required:
      - id
      - newStatus
    properties:
      id:
        type: integer
        format: int64
      newStatus:
        $ref: '#/definitions/Status'
  ChangeStatusResponse:
    type: object
    required:
      - id
      - oldStatus
      - newStatus
    properties:
      id:
        type: integer
        format: int64
      oldStatus:
        $ref: "#/definitions/Status"
      newStatus:
        $ref: "#/definitions/Status"
        example: online
  Status:
    type: string
    enum: [ offline, online ]